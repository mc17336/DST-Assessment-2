      ## Hi guys! I'll use this space to determine what I've done
      ## Feel free to change things up (but comment if you do so please - so we can all make sense of the changes)
      ## or ask questions about bits of code (again, via commenting)
      
            ## ALEX'S CODE START 
                  ## {
                  
    ## Reading the data        
setwd("D://R-4.0.2//ExcelWorks")
data<- read.csv(file = "MAC.csv", header = T) 
head(data, 50)
    ## USE THIS: We don't need 1st column - see time analysis discussion on discord
          ## Our data is sampled => Can't do reliable time analysis
data<- data[, -1]
# d <- data[data$service == "http", ]

    ## How many NA's in duration
c<- 0
for( i in 1:nrow(data)) {
	if(is.na(data$duration[i])) 
	c <- c+1 }
	}
  print(c)
  
  c*100/nrow(data) ## 82.76% of the durations are missing... weird

    ## Analysis of ICMP protocols
dOTH <- data[data$conn_state=="OTH", ]
table(data$proto)
table(dOTH$proto)	## OTH contains ALL icmp protocols

t<- table(data$conn_state)
pie(t, labels = names(t))	## OTH is just a small fraction of the states
                          ## Most prevelant states are 'REJ' and 'S0' (Server zero?)
                  ##  Why does OTH have all ICMP, although it's so small otherwise? -- ...
		  
## For reasons of inability to do time analysis (due to sampling!) we can also remove col1
	## so we can decrease the complexity of our ulterior analysis
data <- data[, -1]

	## Handling the Missing Values (NAs)

## This function computes the number of missing values in a dataframe,
## for the numerical/int values only!
## Its default setting is for our dataset.

MissVal <- function(x=data) {
	if(class(x)!="data.frame") {
		stop("Invalid input! Please select a dataframe.")
		}
	c<- vector(length=ncol(x))
						#####  c<- c(0, times = ncol(x))	## This was obviously a typo. The reason for even making this a thing is that if c gets no additive input, 
						## it remains in its pre-defined state which is logical. That is: NOT a vector of 0's, but rather a vector of FALSEs. We can't really work with that. 
						## Weird R interaction
	c<- as.vector(rep(0, times = ncol(x)))						
	for(j in 1:ncol(x)) {
		for(i in 1:nrow(x)) {
			if(is.na(x[i,j])) {
				c[j] <- c[j] +1 }
				}
			}
	c	}
	
	## Turns out the entire local_orig is missing 
	## We'll keep that in mind, but remove it since there's not much we can do about it
	## or much useful analysis to be had
	
data<- data[, -12]

	## We assume that all the 187824 missing values occuring are related.
	## The easiest way to test this is:
dataM <- data[is.na(data$duration), ]
unique(dataM[,9])
unique(dataM[,10])
## They are indeed. dataM contains all the missing values and those only.
	## Are the values otherwise corelated, apart from their missingness?

c1<- cor(na.omit(data$duration), na.omit(data$orig_bytes))
c2<- cor(na.omit(data$duration), na.omit(data$resp_bytes))
c3<- cor(na.omit(data$orig_bytes), na.omit(data$resp_bytes))	## pretty weird results - maybe I did smth wrong?
k1<- na.omit(data$duration)
k2<- na.omit(data$orig_bytes)
k3<- na.omit(data$resp_bytes)

## The data with no missingness (Apart from server - which isn't numerical)
dataW <- data[!(is.na(data$duration)), ]
	## Let's test we extracted it properly
identical(c(0, times = ncol(dataW)), MissVal(dataW))	## Should be TRUE

                  
          ## ALEX CODE END
              ## }
