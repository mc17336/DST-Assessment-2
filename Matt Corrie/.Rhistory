# sum(mydata.good$miss.me)/nrow(mydata.good) ## 82.7% missing
proto <- as.factor(c(mydata$proto))
proto <- unclass(proto)
conn_state <- as.factor(c(mydata$conn_state))
conn_state <- unclass(conn_state)
history <- as.factor(c(mydata$history))
history <- unclass(history)
mydata.good$proto <- proto
mydata.good$conn_state <- conn_state
mydata.good$history <- history
mydata.good
## We'll do 10-fold CV and then apply DBSCAN, training on 90%
dg <- mydata.good
ran <- sample(1:nrow(dg), 0.9 * nrow(dg))
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
dg_norm <- as.data.frame(lapply(dg, nor))
# head(dg_norm)
dg_train <- dg_norm[ran,] 	## extract training set
dg_test <- dg_norm[-ran,]   	## extract testing set
dg_target_cat <- dg[ran, ncol(dg)]
dg_test_cat <- dg[-ran, ncol(dg)]
library("dbscan")
dg_train.svd <- svd(dg_train)
plot(dg_train.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue",log="y")
plot(dg_train.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue")
npcs = 6
i=1;j=2
plot(dg_train.svd$u[,i],
dg_train.svd$u[,j],type="p",
col="#33333311",pch=16,cex=1)
test=kNNdist(dg_train.svd$u[,1:npcs], k = 7,all=TRUE)
testmin=apply(test,1,min)
plot(sort(testmin[testmin>1e-8]),log="y")
threshholds= c(0.01,0.001,0.0001,0.00001,0.000001)
abline(h=c(0.01,0.001,0.0001,0.00001,0.000001))
abline(h=0.0001, col="red")
dbscanres = dbscan(dg_train.svd$u[,1:6],eps = 0.0001,minPts = 20)
dbscanres
jpeg("Assessment2 DBSCAN Clustering.jpg")
for (k in 1:5){
a = seq(k,5)
for (l in a){
if(k==l){next}
plot(dg_train.svd$u[,k],
dg_train.svd$u[,l],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(new=TRUE)
}
}
dev.off()
jpeg("Assessment2 DBSCAN Clustering Eigenvector split.jpg")
op <- par(mfrow=c(3,4))
for (k in 1:5){
a = seq(k,5)
for (l in a){
if(k==l){next}
plot(dg_train.svd$u[,k],
dg_train.svd$u[,l],xlab=k,
ylab=l,
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
}
}
par(op)
dev.off()
So1 <- tapply(mydata$id.orig_h, mydata$id.orig_h)
De1 <- tapply(mydata$id.resp_h, mydata$id.resp_h)
Est <- as.matrix(cbind(So1, De1))
M<- sparseMatrix(i=Est[,1], j=Est[,2])
library(Matrix)
library(irlba)
install.packages("Matrix")
install.packages("irlba")
So1 <- tapply(mydata$id.orig_h, mydata$id.orig_h)
De1 <- tapply(mydata$id.resp_h, mydata$id.resp_h)
Est <- as.matrix(cbind(So1, De1))
M<- sparseMatrix(i=Est[,1], j=Est[,2])
#install.packages("Matrix")
#install.packages("irlba")
#install.packages("Rtsne")
library(Matrix)
library(irlba)
#install.packages("Matrix")
#install.packages("irlba")
#install.packages("Rtsne")
library(Matrix)
library(irlba)
#install.packages("Matrix")
install.packages("irlba")
#install.packages("Rtsne")
library(Matrix)
library(irlba)
library(Rtsne)
#install.packages("Matrix")
install.packages("irlba")
install.packages("Rtsne")
#install.packages("Matrix")
#install.packages("irlba")
#install.packages("Rtsne")
library(Matrix)
library(irlba)
library(Rtsne)
#install.packages("Matrix")
#install.packages("irlba")
install.packages("Rtsne")
library(Matrix)
library(irlba)
library(Rtsne)
#install.packages("Matrix")
#install.packages("irlba")
#install.packages("Rtsne")
library(Matrix)
library(irlba)
library(Rtsne)
So1 <- tapply(mydata$id.orig_h, mydata$id.orig_h)
De1 <- tapply(mydata$id.resp_h, mydata$id.resp_h)
Est <- as.matrix(cbind(So1, De1))
M<- sparseMatrix(i=Est[,1], j=Est[,2])
M
plot(Est.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue",log="y")
Est.svd <- svd(Est)
plot(Est.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue",log="y")
plot(Est.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue")
i=1;j=2
plot(est.svd$u[,i],
set.svd$u[,j],type="p",
col="#33333311",pch=16,cex=1)
i=1;j=2
plot(Est.svd$u[,i],
Est.svd$u[,j],type="p",
col="#33333311",pch=16,cex=1)
test=kNNdist(Est.svd$u[,1:npcs], k = 7,all=TRUE)
test=kNNdist(Est.svd$u[,1:npcs], k = 7,all=TRUE)
test=kNNdist(dg_train.svd$u[,1:npcs], k = 7,all=TRUE)
library("dbscan")
test=kNNdist(Est.svd$u[,1:npcs], k = 7,all=TRUE)
test=kNNdist(Est.svd$u[,1], k = 7,all=TRUE)
test=kNNdist(Est.svd$u, k = 7,all=TRUE)
testmin=apply(test,1,min)
plot(sort(testmin[testmin>1e-8]),log="y")
threshholds= c(0.01,0.001,0.0001,0.00001,0.000001)
abline(h=c(0.01,0.001,0.0001,0.00001,0.000001))
abline(h=0.0001, col="red")
plot(sort(testmin[testmin>1e-8]),log="y")
threshholds= c(0.01,0.001,0.0001,0.00001,0.000001)
abline(h=c(0.01,0.001,0.0001,0.00001,0.000001))
abline(h=0.0005, col="red")
plot(sort(testmin[testmin>1e-8]),log="y")
threshholds= c(0.01,0.001,0.0001,0.00001,0.000001)
abline(h=c(0.01,0.001,0.0001,0.00001,0.000001))
abline(h=0.00005, col="red")
dbscanest = dbscan(Est.svd$u[,1:6],eps = 0.0005,minPts = 4)
dbscanest = dbscan(Est.svd$u,eps = 0.0005,minPts = 4)
dbscanest
plot(dg_train.svd$u[,1],
dg_train.svd$u[,2],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
plot(Est.svd$u[,1],
Est.svd$u[,2],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
M.svd <- svd(M)
plot(M.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue",log="y")
plot(M.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue")
i=1;j=2
plot(M.svd$u[,i],
M.svd$u[,j],type="p",
col="#33333311",pch=16,cex=1)
testM=kNNdist(M.svd$u, k = 7,all=TRUE)
testminM=apply(testM,1,min)
plot(sort(testmin[testminM>1e-8]),log="y")
threshholds= c(0.01,0.001,0.0001,0.00001,0.000001)
abline(h=c(0.01,0.001,0.0001,0.00001,0.000001))
abline(h=0.00005, col="red")
plot(sort(testmin[testminM>1e-8]),log="y")
threshholds= c(0.01,0.001,0.0001,0.00001,0.000001)
abline(h=c(0.01,0.001,0.0001,0.00001,0.000001))
abline(h=0.00001, col="red")
plot(sort(testmin[testminM>1e-8]),log="y")
threshholds= c(0.01,0.001,0.0001,0.00001,0.000001)
abline(h=c(0.01,0.001,0.0001,0.00001,0.000001))
abline(h=0.000001, col="red")
plot(sort(testmin[testminM>1e-8]),log="y")
threshholds= c(0.01,0.001,0.0001,0.00001,0.000001)
abline(h=c(0.01,0.001,0.0001,0.00001,0.000001))
abline(h=0.000004, col="red")
dbscanest = dbscan(Est.svd$u,eps = 0.00005,minPts = 30)
rm(list = ls())
mydata <- read.csv("MAC.csv")
mydata <- data.frame(mydata)
mydata
mtab0=data.frame(
missingduration=is.na(mydata[,"duration"]),
proto=mydata[,"proto"])
mtab0=table(mtab0)
(apply(mtab0,2,function(x)x/sum(x)))
mtab1=data.frame(
missing_orig_bytes=is.na(mydata[,"orig_bytes"]),
proto=mydata[,"proto"])
mtab1=table(mtab1)
(apply(mtab1,2,function(x)x/sum(x)))
mtab2=data.frame(
missing_resp_bytes=is.na(mydata[,"resp_bytes"]),
proto=mydata[,"proto"])
mtab2=table(mtab2)
(apply(mtab2,2,function(x)x/sum(x)))
mtab3=data.frame(
missing_local_orig=is.na(mydata[,"local_orig"]),
proto=mydata[,"proto"])
mtab3=table(mtab3)
(apply(mtab3,2,function(x)x/sum(x)))
unique_uid <- mydata[!duplicated(mydata[,c('uid')]),]
unique_uid
drop_columns <- c("X","ts","local_orig","uid")
mydata <- mydata[, !names(mydata) %in% drop_columns]
head(mydata)
miss.me <- vector(length = nrow(mydata))
miss.me <- rep(0, times = nrow(mydata))
for(i in 1:nrow(mydata)) {
if(is.na(mydata$duration[i])) { miss.me[i] <- 1 }
}
str(mydata)
mydata.good <- as.data.frame(cbind(id.orig_p = mydata$id.orig_p, id.resp_p = mydata$id.resp_p,
orig_pkts = mydata$orig_pkts, orig_ip_bytes = mydata$orig_ip_bytes,
resp_pkts = mydata$resp_pkts, resp_ip_bytes = mydata$resp_ip_bytes))
mydata.good<- cbind(mydata.good, miss.me)
head(mydata.good)
str(mydata.good) # Should be only ints and nums
for(i in 1:ncol(mydata.good)) { mydata.good[,i] <- as.numeric(mydata.good[,i]) }
str(mydata.good)		## All should be nums now
# sum(mydata.good$miss.me)/nrow(mydata.good) ## 82.7% missing
proto <- as.factor(c(mydata$proto))
proto <- unclass(proto)
conn_state <- as.factor(c(mydata$conn_state))
conn_state <- unclass(conn_state)
history <- as.factor(c(mydata$history))
history <- unclass(history)
mydata.good$proto <- proto
mydata.good$conn_state <- conn_state
mydata.good$history <- history
mydata.good
## We'll do 10-fold CV and then apply DBSCAN, training on 90%
dg <- mydata.good
ran <- sample(1:nrow(dg), 0.9 * nrow(dg))
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
dg_norm <- as.data.frame(lapply(dg, nor))
# head(dg_norm)
dg_train <- dg_norm[ran,] 	## extract training set
dg_test <- dg_norm[-ran,]   	## extract testing set
dg_target_cat <- dg[ran, ncol(dg)]
dg_test_cat <- dg[-ran, ncol(dg)]
library("dbscan")
dg_train.svd <- svd(dg_train)
dg_train.svd <- svd(dg_train)
plot(dg_train.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue",log="y")
plot(dg_train.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue")
npcs = 6
i=1;j=2
plot(dg_train.svd$u[,i],
dg_train.svd$u[,j],type="p",
col="#33333311",pch=16,cex=1)
test=kNNdist(dg_train.svd$u[,1:npcs], k = 7,all=TRUE)
testmin=apply(test,1,min)
test=kNNdist(dg_train.svd$u[,1:npcs], k = 7,all=TRUE)
testmin=apply(test,1,min)
plot(sort(testmin[testmin>1e-8]),log="y")
threshholds= c(0.01,0.001,0.0001,0.00001,0.000001)
abline(h=c(0.01,0.001,0.0001,0.00001,0.000001))
abline(h=0.0001, col="red")
dbscanres = dbscan(dg_train.svd$u[,1:6],eps = 0.0001,minPts = 20)
dbscanres
jpeg("Assessment2 DBSCAN Clustering.jpg")
for(k in 1:5){
for(l in k+1:5){
plot(dg_train.svd$u[,k],
dg_train.svd$u[,l],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(new=TRUE)
}
}
dev.off()
jpeg("Assessment2 DBSCAN Clustering Eigenvector split.jpg")
for(k in 1:4){
for(l in k+1:5){
plot(dg_train.svd$u[,k],
dg_train.svd$u[,l],xlab=i,
ylab=j,
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(mfrow=c(3,4))
}
}
dev.off()
#install.packages("Matrix")
#install.packages("irlba")
#install.packages("Rtsne")
library(Matrix)
library(irlba)
library(Rtsne)
So1 <- tapply(mydata$id.orig_h, mydata$id.orig_h)
De1 <- tapply(mydata$id.resp_h, mydata$id.resp_h)
Est <- as.matrix(cbind(So1, De1))
M<- sparseMatrix(i=Est[,1], j=Est[,2])
M.svd <- svd(M)
plot(M.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue",log="y")
plot(M.svd$d,xlab="Eigenvalue index",ylab="Eigenvalue")
npcs = 30
i=1;j=2
plot(M.svd$u[,i],
M.svd$u[,j],type="p",
col="#33333311",pch=16,cex=1)
testM=kNNdist(M.svd$u, k = 7,all=TRUE)
testminM=apply(testM,1,min)
plot(sort(testmin[testminM>1e-8]),log="y")
threshholds= c(0.01,0.001,0.0001,0.00001,0.000001)
abline(h=c(0.01,0.001,0.0001,0.00001,0.000001))
abline(h=0.000004, col="red")
dbscanest = dbscan(M.svd$u[,1:30],eps = 0.000004,minPts = 30)
plot(Est.svd$u[,1],
Est.svd$u[,2],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
dbscanest
M.svd$u
dbscanestM = dbscan(M.svd$u[,1:30],eps = 0.000004,minPts = 30)
dbscanestM
plot(M.svd$u[,1],
M.svd$u[,2],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
lenght(M.svd$u)
length(M.svd$u)
(M.svd$u)
tail(M.svd$u)
M.svd$u
M.svd$u[,1]
M.svd$u[,2]
M.svd$u[,3]
M.svd$u[,4]
M.svd$u[,5]
M.svd$u[,6]
M.svd$u[,7]
M.svd$u[,1000]
M.svd$u[,100]
M.svd$u[,700]
M.svd$u[,170]
M.svd$u[,180]
M.svd$u[,190]
M.svd$u[,187]
M.svd$u[,188]
M.svd$u[,189]
M.svd$u[,190]
M.svd$u
for (k in (1:4)){
a = seq(k+1:5)
for (l in a){
if(l==k){next}
print(k)
print(a)
}
}
for (k in (1:4)){
a = seq(k+2:5)
for (l in a){
if(l==k){next}
print(k)
print(a)
}
}
for (k in (1:4)){
a = seq(k+1:5)
for (l in a){
if(l==k){next}
print(k)
print(a)
}
}
for (k in (1:4)){
a = seq(k+1,5)
for (l in a){
if(l==k){next}
print(k)
print(a)
}
}
jpeg("Assessment2 DBSCAN Clustering.jpg")
for (k in (1:4)){
a = seq(k+1,5)
for (l in a){
if(l==k){next}
plot(dg_train.svd$u[,k],
dg_train.svd$u[,l],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(new=TRUE)
}
}
dev.off()
jpeg("Assessment2 DBSCAN Clustering Eigenvector split.jpg")
for (k in (1:4)){
a = seq(k+1,5)
for (l in a){
if(l==k){next}
plot(dg_train.svd$u[,k],
dg_train.svd$u[,l],xlab=i,
ylab=j,
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(mfrow=c(3,4))
}
}
dev.off()
for (k in (1:4)){
a = seq(k+1,5)
for (l in a){
if(l==k){next}
print(k)
print(a)
}
}
for (k in (1:188)){
a = seq(k+1,189)
for (l in a){
if(l==k){next}
plot(M.svd$u[,k],
M.svd$u[,l],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(new=TRUE)
}
}
for (k in (1:188)){
a = seq(k+1,189)
print(a)
for (l in a){
if(l==k){next}
plot(M.svd$u[,k],
M.svd$u[,l],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(new=TRUE)
}
}
for (k in (1:188)){
a = seq(k+1,189)
print(a)
for (l in a){
if(l==k){next}
plot(M.svd$u[,k],
M.svd$u[,l],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(new=TRUE)
}
}
for (k in (1:188)){
a = seq(k+1,189)
print(k)
for (l in a){
if(l==k){next}
plot(M.svd$u[,k],
M.svd$u[,l],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(new=TRUE)
}
}
for (k in (1:10)){
a = seq(k+1,11)
print(k)
for (l in a){
if(l==k){next}
plot(M.svd$u[,k],
M.svd$u[,l],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(new=TRUE)
}
}
for (k in (1:20)){
a = seq(k+1,21)
print(k)
for (l in a){
if(l==k){next}
plot(M.svd$u[,k],
M.svd$u[,l],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(new=TRUE)
}
}
for (k in (1:50)){
a = seq(k+1,51)
print(k)
for (l in a){
if(l==k){next}
plot(M.svd$u[,k],
M.svd$u[,l],xlab="",
ylab="",
col=c("#66666666",rainbow(41))[dbscanres$cluster+1],pch=19,cex=0.5)
par(new=TRUE)
}
}
Z <- M.svd$v %*% diag(sqrt(M.svd$d))
tsne_out. <- Rtsne(Z, check_duplicates=FALSE)
plot(tsne_out$Z, pch=16, cex=.3, ann=FALSE, main = "Basic cluster")
Z <- M.svd$v %*% diag(sqrt(M.svd$d))
tsne_out <- Rtsne(Z, check_duplicates=FALSE)
plot(tsne_out$Z, pch=16, cex=.3, ann=FALSE, main = "Basic cluster")
Z <- M.svd$v %*% diag(sqrt(M.svd$d))
tsne_out <- Rtsne(Z, check_duplicates=FALSE)
plot(tsne_out$Z, pch=16, cex=.3, ann=FALSE, main = "Basic cluster")
